{"version":3,"file":"../howler.min.js","sources":["howler.js"],"sourcesContent":["/*!\n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (!node.bufferSource) {\n        return self;\n      }\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.4\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Create a new panner node if one doesn't already exist.\n        var panner = sound._panner;\n        if (!panner) {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n          panner = sound._panner\n        }\n\n        // Update the panner values or create a new panner if none exists.\n        panner.coneInnerAngle = pa.coneInnerAngle;\n        panner.coneOuterAngle = pa.coneOuterAngle;\n        panner.coneOuterGain = pa.coneOuterGain;\n        panner.distanceModel = pa.distanceModel;\n        panner.maxDistance = pa.maxDistance;\n        panner.refDistance = pa.refDistance;\n        panner.rolloffFactor = pa.rolloffFactor;\n        panner.panningModel = pa.panningModel;\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"names":["HowlerGlobal","this","init","Howl","o","src","length","console","error","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","mpegTest","isOldOpera","safariVersion","isOldSafari","audioTest","err","canPlayType","checkOpera","ua","userAgent","match","parseInt","split","checkSafari","indexOf","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","unlock","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Sound","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","loadBuffer","internal","id","num","_ended","_id","soundId","_inactiveSound","_loadQueue","node","playHtml5","loadedNoReadyState","listener","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playbackRate","paused","ejecta","readyState","isCocoonJS","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","index","remCache","splice","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","exports","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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"}